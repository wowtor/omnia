binary_sensor:
  # Register address 128(PLC: 40129)
  # Status bit 1
  # BIT3 Oil return
  # BIT2 Anti-freezing
  # BIT1 Defrosting
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} oil return"
    register_type: holding
    address: 128
    bitmask: 0x8
    entity_category: DIAGNOSTIC
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} anti-freezing"
    register_type: holding
    address: 128
    bitmask: 0x4
    entity_category: DIAGNOSTIC
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} defrosting"
    register_type: holding
    address: 128
    bitmask: 0x2
    entity_category: DIAGNOSTIC

sensor:
  # Register address 5(PLC: 40006)
  # Function Setting
  # BIT7 0: Silent mode level1; 1: Silent mode level2
  # BIT6 Silent mode
  # Actual interpretation: 0=off; 1=level1; 2=level2
  # NB: workaround for silent mode by lack of select/number bitmask
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} silent state"
    id: "${prefix}_silent_state"
    register_type: holding
    address: 5
    value_type: U_WORD
    entity_category: DIAGNOSTIC
    bitmask: 0xc0
    disabled_by_default: true
    filters:
      - delta: 1
    on_value:
      then:
        - select.set_index:
            id: "${prefix}_silent_mode"
            index: !lambda |-
                  ESP_LOGD("main", "change of silent state triggered mode option select: %d", (int)x);
                  return (int)x;
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} curve selected"
    register_type: holding
    address: 6
    value_type: U_WORD
    entity_category: DIAGNOSTIC
    bitmask: 0xff
    disabled_by_default: true
  # Register address 100 (PLC: 40101)
  # Operating frequency
  # Compressor operating frequency in Hz
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} operating frequency"
    register_type: holding
    address: 100
    unit_of_measurement: "Hz"
    value_type: U_WORD
    entity_category: DIAGNOSTIC
    disabled_by_default: true
  # Register address 102 (PLC: 40103)
  # Fan Speed
  # Fan speed, in r/min
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} fan speed"
    icon: "mdi:wind-power"
    register_type: holding
    address: 102
    unit_of_measurement: "r/min"
    value_type: U_WORD
    entity_category: DIAGNOSTIC
  # Register address 103(PLC: 40104) PMV openness
  # Openness of the outdoor unit's electronic expansion valve in P
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} expansion valve openness"
    register_type: holding
    address: 103
    unit_of_measurement: "%"
    value_type: U_WORD
    entity_category: DIAGNOSTIC
  # 104(PLC: 40105) Water inlet temperature
  # TW_in, unit: °C
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} water inlet temperature"
    register_type: holding
    address: 104
    device_class: TEMPERATURE
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-water"
    value_type: U_WORD
    entity_category: DIAGNOSTIC
  # Register address 105(PLC: 40106) Water outlet temperature
  # TW_out, unit: °C
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} Water outlet temperature"
    register_type: holding
    address: 105
    device_class: TEMPERATURE
    unit_of_measurement: "°C"
    icon: "mdi:thermometer-water"
    value_type: U_WORD
    entity_category: DIAGNOSTIC
  # Register address 106(PLC: 40107) T3 Temperature
  # Condenser temperature, unit: °C
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} condenser temperature"
    register_type: holding
    address: 106
    device_class: TEMPERATURE
    unit_of_measurement: "°C"
    value_type: U_WORD
    entity_category: DIAGNOSTIC
    disabled_by_default: true
  # Register address 107(PLC: 40108) T4 Temperature
  # Outdoor ambient temperature unit: °C
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} ambient temperature"
    register_type: holding
    address: 107
    device_class: TEMPERATURE
    unit_of_measurement: "°C"
    entity_category: DIAGNOSTIC
    value_type: S_WORD
    accuracy_decimals: 0
  # Register address 108(PLC: 40109) Discharge temperature
  # Compressor discharge temperature Tp unit: °C
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} condenser discharge temperature"
    register_type: holding
    address: 108
    device_class: TEMPERATURE
    unit_of_measurement: "°C"
    entity_category: DIAGNOSTIC
    value_type: U_WORD
    disabled_by_default: true
  # Register address 109(PLC: 40110) Suction temperature
  # Compressor suction temperature Th, unit:°C
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} condenser suction temperature"
    register_type: holding
    address: 109
    device_class: TEMPERATURE
    unit_of_measurement: "°C"
    entity_category: DIAGNOSTIC
    value_type: U_WORD
    disabled_by_default: true
  # Register address 110(PLC: 40111) T1
  # System total water outlet temperature (behind the auxiliary heater) ,unit: °C
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} system water outlet temperature"
    register_type: holding
    address: 110
    device_class: TEMPERATURE
    unit_of_measurement: "°C"
    entity_category: DIAGNOSTIC
    value_type: U_WORD
    disabled_by_default: true
  # Register address 111(PLC: 40112) Tw2
  # Zone 2 water flow temperature , unit: °C
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} system water outlet temperature zone2"
    register_type: holding
    address: 111
    device_class: TEMPERATURE
    unit_of_measurement: "°C"
    entity_category: DIAGNOSTIC
    value_type: U_WORD
    disabled_by_default: true
  # Register address 112(PLC: 40113) T2
  # Refrigerant liquid side temperature, unit: °C
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} refrigerant liquid side temperature"
    register_type: holding
    address: 112
    entity_category: DIAGNOSTIC
    value_type: U_WORD
    device_class: TEMPERATURE
    unit_of_measurement: "°C"
    disabled_by_default: true
  # Register address 113(PLC: 40114) T2B
  # Refrigerant gas side temperature, unit: °C
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} refrigerant gas side temperature"
    register_type: holding
    address: 113
    entity_category: DIAGNOSTIC
    value_type: U_WORD
    device_class: TEMPERATURE
    unit_of_measurement: "°C"
    disabled_by_default: true
  # Register address 116(PLC: 40117) Pressure 1
  # Outdoor unit high pressure value, unit: kPa
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} high pressure"
    register_type: holding
    address: 116
    entity_category: DIAGNOSTIC
    value_type: U_WORD
    device_class: PRESSURE
    unit_of_measurement: kPa
    disabled_by_default: true
  # Register address 117(PLC: 40118) Pressure 2
  # Outdoor unit low pressure value, unit: kPa
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} low pressure"
    register_type: holding
    address: 117
    entity_category: DIAGNOSTIC
    value_type: U_WORD
    device_class: PRESSURE
    unit_of_measurement: kPa
    disabled_by_default: true
  # 118 (PLC: 40119) Outdoor unit current
  # Outdoor unit operating current, unit: A
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} operating current"
    id: "${prefix}_operating_current"
    register_type: holding
    address: 118
    entity_category: DIAGNOSTIC
    value_type: U_WORD
    device_class: CURRENT
    unit_of_measurement: A
    disabled_by_default: true
  # 119 (PLC: 40120) Outdoor unit voltage
  # Outdoor unit voltage, unit: V
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} operating voltage"
    id: "${prefix}_operating_voltage"
    register_type: holding
    address: 119
    entity_category: DIAGNOSTIC
    value_type: U_WORD
    device_class: VOLTAGE
    unit_of_measurement: V
    disabled_by_default: true
  - platform: template
    name: "${friendly_prefix} apparent power"
    id: "${prefix}_apparent_power"
    lambda: "return id(${prefix}_operating_voltage).state * id(${prefix}_operating_current).state;"
    update_interval: 30s
    unit_of_measurement: VA
    device_class: APPARENT_POWER
    accuracy_decimals: 0
    entity_category: DIAGNOSTIC
  # 122 (PLC: 40123) Compressor operation time
  # Compressor operating time in hour
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} operating time"
    register_type: holding
    address: 122
    entity_category: DIAGNOSTIC
    value_type: U_WORD
    device_class: DURATION
    unit_of_measurement: h
    disabled_by_default: true
  # 123 (PLC: 40124) Unit capacity
  # 0702 for 200 register is reserved. When it is 071x, data 4-30 means 4-30kW
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} model capacity"
    register_type: holding
    address: 123
    entity_category: DIAGNOSTIC
    value_type: U_WORD
    device_class: POWER
    unit_of_measurement: kW
    disabled_by_default: true
    skip_updates: 720
  # 124(PLC: 40125) Current fault
  # Check the code table for detailed fault codes
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} status code"
    register_type: holding
    address: 124
    entity_category: DIAGNOSTIC
    value_type: U_WORD
  # Register address 130(PLC: 40131) Software version
  # 1~99 is the software version of hydronic module
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} software version"
    register_type: holding
    address: 130
    entity_category: DIAGNOSTIC
    value_type: U_WORD
    skip_updates: 720
    disabled_by_default: true
  # Register address 131(PLC: 40132) Wired controller version No.
  # 1~99 is the wired controller's version number.
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} controller version"
    register_type: holding
    address: 131
    value_type: U_WORD
    skip_updates: 720
    disabled_by_default: true
  # 132(PLC: 40133) Unit target frequency
  # Hz
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} target frequency"
    register_type: holding
    address: 132
    entity_category: DIAGNOSTIC
    value_type: U_WORD
    device_class: FREQUENCY
    unit_of_measurement: Hz
    disabled_by_default: true
  # 133(PLC: 40134)
  # DC bus current
  # Unit: A
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} DC bus current"
    register_type: holding
    address: 133
    entity_category: DIAGNOSTIC
    value_type: U_WORD
    device_class: CURRENT
    unit_of_measurement: A
    disabled_by_default: true
  # 134(PLC: 40135)
  # DC bus voltage
  # The actual value/10, unit: V
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} DC bus voltage"
    register_type: holding
    address: 134
    entity_category: DIAGNOSTIC
    value_type: U_WORD
    device_class: VOLTAGE
    unit_of_measurement: V
    disabled_by_default: true
  # Register address 135( PLC: 40136) TF module temperature
  # Feedback on outdoor unit, unit: °C
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} TF module temperature"
    register_type: holding
    address: 135
    entity_category: DIAGNOSTIC
    value_type: U_WORD
    device_class: TEMPERATURE
    unit_of_measurement: "°C"
    disabled_by_default: true
  # Register address 136(PLC: 40137) Climate curve T1S calculated value 1
  # The corresponding calculated T1S of zone 1
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} curve calculated setpoint"
    register_type: holding
    address: 136
    entity_category: DIAGNOSTIC
    value_type: U_WORD
    device_class: TEMPERATURE
    unit_of_measurement: "°C"
    disabled_by_default: true
    filters:
      - filter_out: 0xff
      - timeout: 5min
  # Register address 137(PLC: 40138) Climate curve T1S calculated value 2
  # The corresponding calculated T1S of zone 2
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} curve calculated setpoint zone2"
    register_type: holding
    address: 137
    entity_category: DIAGNOSTIC
    value_type: U_WORD
    device_class: TEMPERATURE
    unit_of_measurement: "°C"
    disabled_by_default: true
    filters:
      - filter_out: 0xff
      - timeout: 5min
  # Register address 138( PLC: 40139) Water flow
  # The actual value*100, unit: m3/H
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} water flow"
    register_type: holding
    address: 138
    unit_of_measurement: "m3/h"
    icon: "mdi:pump"
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: .01
    entity_category: DIAGNOSTIC
    disabled_by_default: true
  # Register address 140(PLC: 40141) Ability of Hydraulic module
  # The actual value*100, unit: kW
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} output power"
    id: "${prefix}_output_power"
    register_type: holding
    address: 140
    device_class: POWER
    unit_of_measurement: W
    value_type: U_WORD
    accuracy_decimals: 0
    filters:
      - multiply: 10
    on_value_range:
      - below: 0
        then:
          - switch.turn_off: "${prefix}_enable"
  - platform: integration
    name: "${friendly_prefix} energy delivered"
    sensor: "${prefix}_output_power"
    time_unit: h
    unit_of_measurement: kWh
    integration_method: trapezoid
    device_class: ENERGY
    state_class: total_increasing
    accuracy_decimals: 2
    filters:
      - multiply: .001
    restore: false
  # Register address 143(PLC: 40144)
  # Higher bits for electricity consumption
  # Register address 144(PLC: 40145)
  # Lower bits for electricity consumption
  - platform: modbus_controller
    modbus_controller_id: ${prefix}_modbus
    name: ${friendly_prefix} lifetime energy consumption
    id: ${prefix}_lifetime_energy_consumption
    register_type: holding
    address: 143
    value_type: U_DWORD
    skip_updates: 10
    unit_of_measurement: kWh
    device_class: ENERGY
    state_class: total_increasing
    accuracy_decimals: 0
  # Register address 145(PLC: 40146)
  # Higher bits for power output
  # Register address 146(PLC: 40147)
  # Lower bits for power output
  - platform: modbus_controller
    modbus_controller_id: ${prefix}_modbus
    name: ${friendly_prefix} lifetime energy delivered
    id: ${prefix}_lifetime_energy_delivered
    register_type: holding
    address: 145
    value_type: U_DWORD
    skip_updates: 10
    unit_of_measurement: kWh
    device_class: ENERGY
    state_class: total_increasing
    accuracy_decimals: 0
  # lifetime COP = energy delivered / energy consumption
  - platform: template
    name: "${friendly_prefix} lifetime COP"
    lambda: |-
        return 100 * id(${prefix}_lifetime_energy_delivered).state / id(${prefix}_lifetime_energy_consumption).state;
    update_interval: 1h
    unit_of_measurement: "%"
    icon: mdi:percent
    accuracy_decimals: 0
    entity_category: DIAGNOSTIC
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} maximum cooling setpoint"
    id: ${prefix}_max_cool_setpoint
    register_type: holding
    address: 201
    device_class: TEMPERATURE
    unit_of_measurement: "°C"
    value_type: U_WORD
    bitmask: 0xff
    entity_category: DIAGNOSTIC
    disabled_by_default: true
    skip_updates: 720
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} minimum cooling setpoint"
    id: ${prefix}_min_cool_setpoint
    register_type: holding
    address: 202
    device_class: TEMPERATURE
    unit_of_measurement: "°C"
    value_type: U_WORD
    bitmask: 0xff
    entity_category: DIAGNOSTIC
    disabled_by_default: true
    skip_updates: 720
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} maximum heating setpoint"
    id: ${prefix}_max_heat_setpoint
    register_type: holding
    address: 203
    device_class: TEMPERATURE
    unit_of_measurement: "°C"
    value_type: U_WORD
    bitmask: 0xff
    entity_category: DIAGNOSTIC
    disabled_by_default: true
    skip_updates: 720
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} minimum heating setpoint"
    id: ${prefix}_min_heat_setpoint
    register_type: holding
    address: 204
    device_class: TEMPERATURE
    unit_of_measurement: "°C"
    value_type: U_WORD
    bitmask: 0xff
    entity_category: DIAGNOSTIC
    disabled_by_default: true
    skip_updates: 720


select:
  - platform: template
    name: "${friendly_prefix} silent mode"
    id: "${prefix}_silent_mode"
    entity_category: CONFIG
    icon: "mdi:home-sound-out"
    options:
      - "normal"
      - "silent level 1"
      - "silent level 2"
    optimistic: true
    set_action:
      - if:
          condition:
            lambda: 'return x=="normal";'
          then:
            - if:
                condition:
                  lambda: 'return id(${prefix}_silent_mode_level1).state;'
                then:
                  - switch.turn_off: "${prefix}_silent_mode_level1"
            - if:
                condition:
                  lambda: 'return id(${prefix}_silent_mode_level2).state;'
                then:
                  - switch.turn_off: "${prefix}_silent_mode_level2"
          else:
            - if:
                condition:
                  lambda: 'return x=="silent level 2";'
                then:
                  - switch.turn_on: "${prefix}_silent_mode_level2"
                else:
                  - switch.turn_on: "${prefix}_silent_mode_level1"
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} HVAC mode"
    id: "${prefix}_hvac_mode"
    icon: "mdi:heat-pump"
    address: 1
    value_type: U_WORD
    optionsmap:
      auto: 1
      cool: 2
      heat: 3
    entity_category: CONFIG
  - platform: template
    name: "${friendly_prefix} emission type heating"
    id: ${prefix}_emission_heat_zone1
    entity_category: CONFIG
    options:
      - "fan coil"
      - "radiators"
      - "floor heating"
    optimistic: true
    set_action:
      - lambda: |-
            int offset = 0;
            int i = id(${prefix}_emission_heat_zone1).index_of(x).value();
            int bitmask = 0xffff - (0xf << offset);
            int old_state = (int)id(${prefix}_emission_type).state;
            int new_state = (old_state & bitmask) | (i << offset);
            if (old_state != new_state) {
              ESP_LOGD("main", "setting emssion type: %d -> %d", old_state, new_state);
              auto call = id(${prefix}_emission_type).make_call();
              call.set_value(new_state);
              call.perform();
            }
  - platform: template
    name: "${friendly_prefix} emission type heating zone2"
    id: ${prefix}_emission_heat_zone2
    disabled_by_default: true
    entity_category: CONFIG
    options:
      - "fan coil"
      - "radiators"
      - "floor heating"
    optimistic: true
    set_action:
      - lambda: |-
            int offset = 4;
            int i = id(${prefix}_emission_heat_zone2).index_of(x).value();
            int bitmask = 0xffff - (0xf << offset);
            int old_state = (int)id(${prefix}_emission_type).state;
            int new_state = (old_state & bitmask) | (i << offset);
            if (old_state != new_state) {
              ESP_LOGD("main", "setting emssion type: %d -> %d", old_state, new_state);
              auto call = id(${prefix}_emission_type).make_call();
              call.set_value(new_state);
              call.perform();
            }
  - platform: template
    name: "${friendly_prefix} emission type cooling"
    id: ${prefix}_emission_cool_zone1
    entity_category: CONFIG
    options:
      - "fan coil"
      - "radiators"
      - "floor heating"
    optimistic: true
    set_action:
      - lambda: |-
            int offset = 8;
            int i = id(${prefix}_emission_cool_zone1).index_of(x).value();
            int bitmask = 0xffff - (0xf << offset);
            int old_state = (int)id(${prefix}_emission_type).state;
            int new_state = (old_state & bitmask) | (i << offset);
            if (old_state != new_state) {
              ESP_LOGD("main", "setting emssion type: %d -> %d", old_state, new_state);
              auto call = id(${prefix}_emission_type).make_call();
              call.set_value(new_state);
              call.perform();
            }
  - platform: template
    name: "${friendly_prefix} emission type cooling zone2"
    id: ${prefix}_emission_cool_zone2
    disabled_by_default: true
    entity_category: CONFIG
    options:
      - "fan coil"
      - "radiators"
      - "floor heating"
    optimistic: true
    set_action:
      - lambda: |-
            int offset = 12;
            int i = id(${prefix}_emission_cool_zone2).index_of(x).value();
            int bitmask = 0xffff - (0xf << offset);
            int old_state = (int)id(${prefix}_emission_type).state;
            int new_state = (old_state & bitmask) | (i << offset);
            if (old_state != new_state) {
              ESP_LOGD("main", "setting emssion type: %d -> %d", old_state, new_state);
              auto call = id(${prefix}_emission_type).make_call();
              call.set_value(new_state);
              call.perform();
            }

switch:
  # Register address 0 (PLC:40001)
  # Power on or off.
  # BIT1 0: power off floor heating; 1: power on floor heating;(zone 1)
  #	(water flow temperature control)
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} on/off"
    id: "${prefix}_enable"
    icon: "mdi:power-standby"
    register_type: holding
    address: 0
    bitmask: 2
  # Register address 5 (PLC: 40006)
  # Function Setting
  # BIT13 1: climate curve setting is valid; 0: climate curve setting is invalid. (zone2)
  # BIT12 1: climate curve setting is valid; 0: climate curve setting is invalid. (zone1)
  # BIT10 ECO mode
  # bit6-7: see sensor: silent state
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} curve mode zone2"
    icon: "mdi:snowflake-thermometer"
    register_type: holding
    address: 5
    bitmask: 0x2000
    entity_category: CONFIG
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} curve mode"
    icon: "mdi:snowflake-thermometer"
    register_type: holding
    address: 5
    bitmask: 0x1000
    entity_category: CONFIG
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} eco mode"
    icon: "mdi:sprout"
    register_type: holding
    address: 5
    bitmask: 0x400
    entity_category: CONFIG
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    id: "${prefix}_silent_mode_level1"
    icon: "mdi:home-sound-out"
    register_type: holding
    address: 5
    bitmask: 0x40
    entity_category: CONFIG
    internal: true
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    id: "${prefix}_silent_mode_level2"
    register_type: holding
    address: 5
    bitmask: 0x80
    entity_category: CONFIG
    internal: true

number:
  # Register address 6 (PLC: 40007)
  # Curve Selection
  # Bit8-Bit15 Climate Curve 1-9(zone 2)
  # Bit0-Bit7 Climate Curve 1-9(zone 1)
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} curve selected"
    id: "${prefix}_curve_selected"
    register_type: holding
    address: 6
    value_type: U_WORD
    mode: slider
    min_value: 1
    max_value: 9
    step: 1
    entity_category: CONFIG
    lambda: "return (int)x & 0xff;"
    write_lambda: |-
      int writeval = ((int)id(${prefix}_curve_selected_zone2).state << 8) | (int)x;
      ESP_LOGD("main", "write curve selection: %d", writeval);
      return writeval;
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} curve selected zone2"
    id: "${prefix}_curve_selected_zone2"
    register_type: holding
    address: 6
    value_type: U_WORD
    mode: slider
    min_value: 1
    max_value: 9
    step: 1
    entity_category: CONFIG
    lambda: "return (int)x >> 8;"
    write_lambda: |-
      int writeval = ((int)x << 8) | (int)id(${prefix}_curve_selected).state;
      ESP_LOGD("main", "write curve selection: %d", writeval);
      return writeval;
  # Register address 11(PLC: 40012) T1S
  # Water temperature T1S is corresponding to the floor heating. (zone 1)
  # Register address 12(PLC: 40013) T1S
  # Water temperature T1S is corresponding to the floor heating. (zone 2)
  # In cooling mode,
  #   T1S low temp setting range is 5~25°C;
  #   T1S high temp setting range is 18~25°C.
  # In heating mode,
  #   T1S low temp setting range is 25~55°C;
  #   T1S high temp setting range is 35~65°C.
  # Note: high/low range setting depends on emission system (floor/radiators)
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} preset setpoint"
    icon: "mdi:thermometer-water"
    device_class: TEMPERATURE
    unit_of_measurement: "°C"
    entity_category: CONFIG
    address: 11
    value_type: U_WORD
    min_value: 5
    max_value: 55
    step: 1
    mode: slider
    skip_updates: 30
    write_lambda: |-
      float min_value, max_value;
      if (id(${prefix}_hvac_mode).state == "cool") {
        min_value = id(${prefix}_min_cool_setpoint).state;
        max_value = id(${prefix}_max_cool_setpoint).state;
      } else if (id(${prefix}_hvac_mode).state == "cool") {
        min_value = id(${prefix}_min_heat_setpoint).state;
        max_value = id(${prefix}_max_heat_setpoint).state;
      } else {
        min_value = id(${prefix}_min_cool_setpoint).state;
        max_value = id(${prefix}_max_heat_setpoint).state;
      }
      if (x < min_value)
        return min_value;
      else if (x > max_value)
        return max_value;
      else
        return x;
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} preset setpoint zone2"
    icon: "mdi:thermometer-water"
    device_class: TEMPERATURE
    unit_of_measurement: "°C"
    entity_category: CONFIG
    address: 12
    value_type: U_WORD
    min_value: 5
    max_value: 55
    step: 1
    skip_updates: 30
    disabled_by_default: true
  # Register address 209(PLC: 40210) PUMP RUNNING TIME
  # DHW PUMP water return running time. It is five minutes by default and can
  # be adjusted between 5 and 120 min at an interval of 1 min.
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} pump running time"
    entity_category: CONFIG
    device_class: DURATION
    unit_of_measurement: min
    address: 209
    value_type: U_WORD
    min_value: 5
    max_value: 120
    step: 1
    disabled_by_default: true
    skip_updates: 30
  # Register address 223(PLC: 40224) t_interval_C
  # Time interval of compressor start-up in cooling mode; range: 5~5 min,
  # default setting: 5 min
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} cooling mode compressor startup interval"
    device_class: DURATION
    unit_of_measurement: min
    entity_category: CONFIG
    address: 223
    value_type: U_WORD
    min_value: 5
    max_value: 60
    step: 1
    skip_updates: 30
  # Register address 224(PLC: 40225) dT1SC
  # Default setting: 5°C, range: 2~10°C, setting interval: 1°C
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} cooling water temperature delta"
    device_class: TEMPERATURE
    unit_of_measurement: "°C"
    entity_category: CONFIG
    address: 224
    value_type: U_WORD
    min_value: 2
    max_value: 10
    step: 1
    skip_updates: 30
  # Register address 228(PLC: 40229) t_interval_H
  # Time interval of compressor start-up in the heating mode; range: 5~5 min,
  # default setting: 5 min
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} heating mode compressor startup interval"
    device_class: DURATION
    unit_of_measurement: min
    entity_category: CONFIG
    address: 228
    value_type: U_WORD
    min_value: 5
    max_value: 60
    step: 1
    skip_updates: 30
  # Register address 229(PLC: 40230) dT1SH
  # Default setting: 5°C, range: 2-20°C;
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} heating water temperature delta"
    device_class: TEMPERATURE
    unit_of_measurement: "°C"
    entity_category: CONFIG
    address: 229
    value_type: U_WORD
    min_value: 2
    max_value: 10
    step: 1
    skip_updates: 30
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} heating curve9 setpoint1"
    device_class: TEMPERATURE
    unit_of_measurement: "°C"
    entity_category: CONFIG
    address: 265
    value_type: U_WORD
    min_value: 25
    max_value: 65
    step: 1
    disabled_by_default: true
    skip_updates: 30
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} heating curve9 setpoint2"
    device_class: TEMPERATURE
    unit_of_measurement: "°C"
    entity_category: CONFIG
    address: 266
    value_type: U_WORD
    min_value: 25
    max_value: 65
    step: 1
    disabled_by_default: true
    skip_updates: 30
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} heating curve9 ambient1"
    device_class: TEMPERATURE
    unit_of_measurement: "°C"
    entity_category: CONFIG
    address: 267
    value_type: S_WORD
    min_value: -25
    max_value: 35
    step: 1
    disabled_by_default: true
    skip_updates: 30
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} heating curve9 ambient2"
    device_class: TEMPERATURE
    unit_of_measurement: "°C"
    entity_category: CONFIG
    address: 268
    value_type: S_WORD
    min_value: -25
    max_value: 35
    step: 1
    disabled_by_default: true
    skip_updates: 30
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} power limit"
    icon: "mdi:car-speed-limiter"
    address: 269
    value_type: U_WORD
    min_value: 0
    max_value: 8
    step: 1
    entity_category: CONFIG
    disabled_by_default: true
    skip_updates: 30
  # Register address 272(PLC: 40273) EMISSION TYPE
  # Bit12-15: The type of zone 2 end for cooling mode
  # Bit8-11: The type of zone 1 end for cooling mode
  # Bit4-7: The type of zone 2 end for heating mode
  # Bit0-3: The type of zone 1 end for heating mode
  # Note: the mapping is (needs checking): 0=fan coil; 1=radiator; 2=floor
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    id: "${prefix}_emission_type"
    address: 272
    value_type: U_WORD
    internal: true
    skip_updates: 30
    on_value:
      then:
        - select.set_index:
            id: ${prefix}_emission_heat_zone1
            index: !lambda "return (int)x & 0xf;"
        - select.set_index:
            id: ${prefix}_emission_heat_zone2
            index: !lambda "return ((int)x & 0xf0) >> 4;"
        - select.set_index:
            id: ${prefix}_emission_cool_zone1
            index: !lambda "return ((int)x & 0xf00) >> 8;"
        - select.set_index:
            id: ${prefix}_emission_cool_zone2
            index: !lambda "return ((int)x & 0xf000) >> 12;"


text_sensor:
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} current HVAC mode"
    id: "${prefix}_current_hvac_mode"
    register_type: holding
    address: 101
    entity_category: DIAGNOSTIC
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      ESP_LOGD("main","Found hvac mode code: %d", value);
      switch (value) {
        case 0:  return std::string("off");
        case 2:  return std::string("cool");
        case 3:  return std::string("heat");
        default: return x;
      }
  - platform: modbus_controller
    modbus_controller_id: "${prefix}_modbus"
    name: "${friendly_prefix} status"
    id: "${prefix}_status"
    register_type: holding
    address: 124
    entity_category: DIAGNOSTIC
    raw_encode: HEXBYTES
    icon: mdi:alert
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      ESP_LOGD("main","found device status code: %d", value);
      switch (value) {
        case 0:  return std::string("fine");
        case 1:  return std::string("E0: Water flow fault (E8 displayed 3 times)");
        case 2:  return std::string("E1: Phase loss or neutral wire and live wire are connected");
        case 3:  return std::string("E2: Communication fault between controller and hydraulic");
        case 4:  return std::string("E3: Final outlet water temperature sensor (T1) fault");
        case 5:  return std::string("E4: Water tank temp. sensor (T5) fault");
        case 6:  return std::string("E5: The condensor outlet refrigerant temperature sensor (T3)");
        case 7:  return std::string("E6: The ambient temperature sensor (T4) fault");
        case 8:  return std::string("E7: Buffer tank up temperature sensor (Tbt1) fault");
        case 9:  return std::string("E8: Water flow failure");
        case 10: return std::string("E9: Compressor suction temp. sensor (Th) fault");
        case 11: return std::string("Ea: Compressor discharge temp. sensor (Tp) fault");
        case 12: return std::string("Eb: Solar temp. sensor (Tsolar) fault");
        case 13: return std::string("Ec: The balance tank low temp. sensor (Tbt2) fault");
        case 14: return std::string("Ed: The plate exchanger water inlet temp. sensor (Tw_in) fault");
        case 15: return std::string("Ee: The main control board of hydraulic module EEPROM");
        case 20: return std::string("P0: Low pressure protection");
        case 21: return std::string("P1: High pressure protection");
        case 23: return std::string("P3: Compressor overcurrent protection");
        case 24: return std::string("P4: compressor discharge temp. too high protection");
        case 25: return std::string("P5: high temperature difference protection between water inlet and water outlet of the plate heat exchanger");
        case 26: return std::string("P6: inverter module protection");
        case 31: return std::string("Pb: Anti-freeze mode protection");
        case 33: return std::string("Pd: high temperature protection of refrigerant outlet temp. of condenser");
        case 38: return std::string("Pp: water inlet temperature is higher than water outlet in heating mode");
        case 39: return std::string("H0: communication fault between main control board of hydraulic module and main control board PCB B");
        case 40: return std::string("H1");
        case 41: return std::string("H2");
        case 42: return std::string("H3");
        case 43: return std::string("H4");
        case 44: return std::string("H5");
        case 45: return std::string("H6: DC fan motor fault");
        case 46: return std::string("H7: main circuit voltage protection fault");
        case 47: return std::string("H8: pressure sensor fault");
        case 48: return std::string("H9");
        case 49: return std::string("Ha");
        case 50: return std::string("Hb");
        case 52: return std::string("Hd");
        case 53: return std::string("He");
        case 54: return std::string("Hf: inverter module board EE PROM fault");
        case 55: return std::string("Hh");
        case 57: return std::string("Hp");
        case 65: return std::string("C7");
        case 112:return std::string("bH");
        case 116:return std::string("F1");
        case 134:return std::string("L0: DC compressor inverter module fault");
        case 135:return std::string("L1: DC bus low voltage protection (from inverter module mostly when compressor running)");
        case 136:return std::string("L2: DC bus high voltage protection from DC driver");
        case 138:return std::string("L4: MCE fault");
        case 139:return std::string("L5: Zero speed protection");
        case 141:return std::string("L7: Phase sequence fault");
        case 142:return std::string("L8: Compressor frequency variation greater than 15Hz within one second protection");
        case 143:return std::string("L9: Actual compressor frequency differs from target frequency by more than 15Hz protection");
        default: return x;
      }
